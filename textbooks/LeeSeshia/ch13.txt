Every embedded system must be designed to meet certain requirements. Such system requirements are also called properties or specifications. The need for specifications is aptly captured by the following quotation (paraphrased from Young et al. (1985)):
“A design without specifications cannot be right or wrong, it can only be surprising!”
In present engineering practice, it is common to have system requirements stated in a nat- ural language such as English. As an example, consider the SpaceWire communication protocol that is gaining adoption with several national space agencies (European Cooper- ation for Space Standardization, 2002). Here are two properties reproduced from Section 8.5.2.2 of the specification document, stating conditions on the behavior of the system upon reset:
1. “The ErrorReset state shall be entered after a system reset, after link operation has been terminated for any reason or if there is an error during link initialization.”
2. “Whenever the reset signal is asserted the state machine shall move immediately to the ErrorReset state and remain there until the reset signal is de-asserted.”
It is important to precisely state requirements to avoid ambiguities inherent in natural languages. For example, consider the first property of the SpaceWire protocol stated above. Observe that there is no mention of when the ErrorReset state is to be entered. The systems that implement the SpaceWire protocol are synchronous, meaning that transitions of the state machine occur on ticks of a system clock. Given this, must the ErrorReset state be entered on the very next tick after one of the three conditions becomes true or on some subsequent tick of the clock? As it turns out, the document intends the system to make the transition to ErrorReset on the very next tick, but this is not made precise by the English language description.
This chapter will introduce techniques to specify system properties mathematically and precisely. A mathematical specification of system properties is also known as a formal specification. The specific formalism we will use is called temporal logic. As the name suggests, temporal logic is a precise mathematical notation with associated rules for rep- resenting and reasoning about timing-related properties of systems. While temporal logic has been used by philosophers and logicians since the times of Aristotle, it is only in the last thirty years that it has found application as a mathematical notation for specifying system requirements.
One of the most common kinds of system property is an invariant. It is also one of the simplest forms of a temporal logic property. We will first introduce the notion of an invariant and then generalize it to more expressive specifications in temporal logic.

13.1 Invariants
An invariant is a property that holds for a system if it remains true at all times during operation of the system. Put another way, an invariant holds for a system if it is true in the initial state of the system, and it remains true as the system evolves, after every reaction, in every state.
In practice, many properties are invariants. Both properties of the SpaceWire proto- col stated above are invariants, although this might not be immediately obvious. Both SpaceWire properties specify conditions that must remain true always. Below is an ex- ample of an invariant property of a model that we have encountered in Chapter 3. It is also desirable to specify invariant properties of software and hardware implemen- tations of embedded systems. Some of these properties specify correct programming practice on language constructs. For example, the C language property “The program never dereferences a null pointer”
is an invariant specifying good programming practice. Typically dereferencing a null pointer in a C program results in a segmentation fault, possibly leading to a system crash. Similarly, several desirable properties of concurrent programs are invariants, as illustrated in the following example. Example 13.2: Consider the following property regarding an absence of dead- lock:
If a thread A blocks while trying to acquire a mutex lock, then the thread B that holds that lock must not be blocked attempting to acquire a lock held by A. This property is required to be an invariant on any multithreaded program con- structed from threads A and B. The property may or may not hold for a particular program. If it does not hold, there is risk of deadlock.
13.2 Linear Temporal Logic
We now give a formal description of temporal logic and illustrate with examples of how it can be used to specify system behavior. In particular, we study a particular kind of tem- poral logic known as linear temporal logic, or LTL. There are other forms of temporal logic, some of which are briefly surveyed in sidebars.
Using LTL, one can express a property over a single, but arbitrary execution of a system. For instance, one can express the following kinds of properties in LTL:
• Occurrence of an event and its properties. For example, one can express the prop- erty that an event A must occur at least once in every trace of the system, or that it must occur infinitely many times.
• Causal dependency between events. An example of this is the property that if an event A occurs in a trace, then event B must also occur.
• Ordering of events. An example of this kind of property is one specifying that every occurrence of event A is preceded by a matching occurrence of B.
We now formalize the above intuition about the kinds of properties expressible in linear temporal logic. In order to perform this formalization, it is helpful to fix a particular formal model of computation. We will use the theory of finite-state machines, introduced in Chapter 3.
Recall from Section 3.6 that an execution trace of a finite-state machine is a sequence of the form
q0, q1, q2, q3, ...,
where qj = (xj , sj , yj ), sj is the state, xj is the input valuation, and yj is the output
valuation at reaction j.
13.2.1 Propositional Logic Formulas
First, we need to be able to talk about conditions at each reaction, such as whether an input or output is present, what the value of an input or output is, or what the state is. Let an atomic proposition be such a statement about the inputs, outputs, or states. It is a predicate (an expression that evaluates to true or false). Examples of atomic propositions that are relevant for the state machines in Figure 13.1 are: 
true Always true. 
false Always false.
x True if input x is present.
x = present True if input x is present.
y = absent True if y is absent.
b True if the FSM is in state b

In each case, the expression is true or false at a reaction qi. The proposition b is true at a reaction qi if qi = (x, b, y) for any valuations x and y, which means that the machine is in state b at the start of the reaction. I.e., it refers to the current state, not the next state. A propositional logic formula or (more simply) proposition is a predicate that combines atomic propositions using logical connectives: conjunction (logical AND, denoted ∧), disjunction (logical OR, denoted ∨), negation (logical NOT, denoted ¬), and implies (logical implication, denoted =⇒ ). Propositions for the state machines in Figure 13.1 include any of the above atomic proposition and expressions using the logical connectives together with atomic propositions. Note that if p1 and p2 are propositions, the proposition p1 =⇒ p2 is true if and only if ¬p2 =⇒ ¬p1. In other words, if we wish to establish that p1 =⇒ p2 is true, it is equally valid to establish that ¬p2 =⇒ ¬p1 is true. In logic, the latter expression is called the contrapositive of the former.
Note further that p1 =⇒ p2 is true if p1 is false. This is easy to see by considering the contrapositive. The proposition ¬p2 =⇒ ¬p1 is true regardless of p2 if ¬p1 is true. Thus, another proposition that is equivalent to p1 =⇒ p2 is
¬p1 ∨p2 .
13.2.2 LTL Formulas
An LTL formula, unlike the above propositions, applies to an entire trace q0, q1, q2, ...,
rather than to just one reaction qi. The simplest LTL formulas look just like the proposi- tions above, but they apply to an entire trace rather than just a single element of the trace. If p is a proposition, then by definition, we say that LTL formula φ = p holds for the trace q0,q1,q2,... if and only if p is true for q0. It may seem odd to say that the formula holds for the entire trace even though the proposition only holds for the first element of the trace, but we will see that LTL provides ways to reason about the entire trace.
By convention, we will denote LTL formulas by φ, φ1, φ2, etc. and propositions by p, p1, p2, etc.
Given a state machine M and an LTL formula φ, we say that φ holds for M if φ holds for all possible traces of M . This typically requires considering all possible inputs. To demonstrate that an LTL formula is false for an FSM, it is sufficient to give one trace for which it is false. Such a trace is called a counterexample. To show that an LTL formula is true for an FSM, you must demonstrate that it is true for all traces, which is often much harder (although not so much harder when the LTL formula is a simple propositional logic formula, because in that case we only have to consider the first element of the trace).
In addition to propositions, LTL formulas can also have one or more special temporal operators. These make LTL much more interesting, because they enable reasoning about entire traces instead of just making assertions about the first element of a trace. There are four main temporal operators, which we describe next.
G Operator
The property Gφ (which is read as “globally φ”) holds for a trace if φ holds for every suffix of that trace. (A suffix is a tail of a trace beginning with some reaction and including all subsequent reactions.)
In mathematical notation, Gφ holds for the trace if and only if, for all j ≥ 0, formula φ holds in the suffix qj , qj+1, qj+2, . . ..
If φ is a propositional logic formula, then Gφ simply means that φ holds in every reaction. We will see, however, that when we combine the G operator with other temporal logic operators, we can make much more interesting statements about traces and about state machines. 
F Operator
The property Fφ (which is read as “eventually φ” or “finally φ”) holds for a trace if φ
holds for some suffix of the trace.
Formally, Fφ holds for the trace if and only if, for some j ≥ 0, formula φ holds in the
suffix qj , qj+1, qj+2, . . ..
Notice that F¬φ holds if and only if ¬Gφ. That is, stating that φ is eventually false is the same as stating that φ is not always true.
X Operator
The property Xφ (which is read as “next state φ” ) holds for a trace q0, q1, q2, . . . if and
only if φ holds for the trace q1, q2, q3, . . ..
U Operator
The property φ1Uφ2 (which is read as “φ1 until φ2”) holds for a trace if φ2 holds for
some suffix of that trace, and φ1 holds until φ2 becomes true.
Formally, φ1Uφ2 holds for the trace if and only if there exists j ≥ 0 such that φ2 holds in the suffix qj,qj+1,qj+2,... and φ1 holds in suffixes qi,qi+1,qi+2,..., for all i s.t. 0 ≤ i < j. φ1 may or may not hold for qj,qj+1,qj+2,....
Some authors define a weaker form of the U operator that does not require φ2 to hold. Using our definition, this can be written
(Gφ1) ∨ (φ1Uφ2) .
This holds if either φ1 always holds (for any suffix) or, if φ2 holds for some suffix, then
φ1 holds for all previous suffixes. This can equivalently be written (F¬φ1) =⇒ (φ1Uφ2).
13.2.3 Using LTL Formulas
The following LTL formulas express commonly useful properties.
(a) Infinitely many occurrences: This property is of the form G Fp, meaning that it is always the case that p is true eventually. Put another way, this means that p is true infinitely often.
(b) Steady-stateproperty:ThispropertyisoftheformFGp,readas“fromsomepoint in the future, p holds at all times.” This represents a steady-state property, indicating that after some point in time, the system reaches a steady state in which p is always true.
(c) Request-response property: The formula G(p =⇒ Fq) can be interpreted to mean that a request p will eventually produce a response q.
13.3 Summary
Dependability and correctness are central concerns in embedded systems design. Formal specifications, in turn, are central to achieving these goals. In this chapter, we have studied temporal logic, one of the main approaches for writing formal specifications. This chapter has provided techniques for precisely stating properties that must hold over time for a system. It has specifically focused on linear temporal logic, which is able to express many safety and liveness properties of systems.
